<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Laziness, Impatience, and Hubris</title>
    <link>blog url</link>
    <description>RSS feed for Laziness, Impatience, and Hubris</description>
    <pubDate>Tue, 26 Jun 2012 10:34:00 -0700</pubDate>
    <item>
      <title>Perl Windows - Grab all the system tray icons &amp; get their co-ordinates</title>
      <link>blog url/perl/windows/automation/2012/06/26/perl-windows-tray-automation.html</link>
      <description>&lt;p&gt;While automating applications on Windows, every now &amp;amp; then I run in to a situation where I have to find a tray icon &amp;amp; do some mouse operations on it. And for the most part, I overlooked it as it was just a small part of my automation needs. Well, it was time to scratch that small itch as it was bothering me. So with the help of [Sinan on StackOverflow][sinan-so], I ended up writing this script.&lt;/p&gt;
</description>
      <pubDate>Tue, 26 Jun 2012 10:34:00 -0700</pubDate>
      <dc:date>2012-06-26T10:34:00-07:00</dc:date>
    </item>
    <item>
      <title>iperf 2.0.4 Windows (win32) native binary</title>
      <link>blog url/iperf/windows/compiled/2010/07/23/iperf-windows-compiled.html</link>
      <description>&lt;p&gt;The last compiled binary for Windows was v1.7.0. But, I like the newer -y option which dumps out the report in CSV format. With the help of this &lt;a href=&quot;http://sourceforge.net/tracker/index.php?func=detail&amp;amp;aid=2919936&amp;amp;group_id=128336&amp;amp;atid=711373&quot;&gt;patch&lt;/a&gt;, I managed to create a binary for Windows. &lt;/p&gt;
</description>
      <pubDate>Fri, 23 Jul 2010 10:29:00 -0700</pubDate>
      <dc:date>2010-07-23T10:29:00-07:00</dc:date>
    </item>
    <item>
      <title>Replace QTP with Selenium + AutoIt + Applescript - Part I</title>
      <link>blog url/qtp/selenium/automation/2010/06/13/replace-qtp-with-selenium.html</link>
      <description>&lt;p&gt;I hate QTP. Why? Because it sucks. Of course, QTP fanboys will immediately jump up &amp;amp; down stating that I don&amp;#39;t know how to use QTP. On the contrary, I know exactly what I am talking about. As of this writing, QTP still does not support Windows 7, heck it still doesn&amp;#39;t support Firefox 3.6! Are you kidding me? Well, apart from HP&amp;#39;s snail pace development process, I have other problems with the tool itself. Like its really retarded scripting engine (which uses vbscript), which does not provide you any real mechanism to maintain frameworks. &lt;/p&gt;
</description>
      <pubDate>Sun, 13 Jun 2010 09:20:00 -0700</pubDate>
      <dc:date>2010-06-13T09:20:00-07:00</dc:date>
    </item>
    <item>
      <title>Hacking Selenium to improve its performance on IE</title>
      <link>blog url/selenium/performance/ie/2010/02/03/selenium-improve-performance-IE.html</link>
      <description>&lt;p&gt;TL;DR of the post below; You have to perform all these steps &amp;amp; in some instances, you can squeeze out better performance from other browsers too:&lt;/p&gt;
</description>
      <pubDate>Wed, 03 Feb 2010 08:14:00 -0800</pubDate>
      <dc:date>2010-02-03T08:14:00-08:00</dc:date>
    </item>
    <item>
      <title>Add getCSSCount command to Selenium</title>
      <link>blog url/hacking/selenium/getcsscount/2009/12/30/selenium-getcsscount.html</link>
      <description>&lt;p&gt;getXpathCount is a very useful command that Selenium devs provided. And once you started enjoying coding with it, you realized IE was throwing roadblocks since XPath is dog slow on it (what else is new?). So you look around and you&amp;#39;re told to switch to CSS Selectors (or locators). Well, the very first thing you&amp;#39;re looking for is the count equivalent for CSS and it is conveniently missing. So, I ended up hacking the Selenenium core to add the missing command - &amp;quot;getCSSCount&amp;quot;.&lt;/p&gt;
</description>
      <pubDate>Wed, 30 Dec 2009 07:35:00 -0800</pubDate>
      <dc:date>2009-12-30T07:35:00-08:00</dc:date>
    </item>
    <item>
      <title>Create your own VMWare Connection Broker</title>
      <link>blog url/vmware/vm/connection-broker/2009/12/15/create-vmware-connection-broker.html</link>
      <description>&lt;p&gt;First of all, &amp;quot;Connection Broker&amp;quot; is a highly glorified marketing term to say that this piece of software will allow you to connect to your Virtual Machine based on some &amp;quot;rules&amp;quot; (access, authorization, availability etc and the more &amp;quot;rules&amp;quot; you add, it becomes more complex) and hence the &amp;quot;broker&amp;quot; part. In this post, I&amp;#39;ll be concentrating on VMware since I am more familiar with it, but you can pretty much implement this connection broker for the Sun &amp;amp; Citrix solutions as well. It looks complicated, but it isn&amp;#39;t, that is mostly because the excellent SDK that they provide.&lt;/p&gt;
</description>
      <pubDate>Tue, 15 Dec 2009 03:45:00 -0800</pubDate>
      <dc:date>2009-12-15T03:45:00-08:00</dc:date>
    </item>
    <item>
      <title>VMWare Lab Manager and Perl</title>
      <link>blog url/vmware/vm/labmanager/2009/12/08/perl-vmware-labmanager.html</link>
      <description>&lt;p&gt;VMware&amp;#39;s Lab Manager is an amazing tool to have for testing organizations (which was originally designed by a company called Akimbi). But this post is not about what it is &amp;amp; how it can be useful. This post is to give you an example on  how you can consume its SOAP API from Perl. We use Lab Manager extensively for all our feature testing &amp;amp; automation. For automation, you can deploy, undeploy and change some of the vm properties using the SOAP API. Lab Manager also has more &amp;quot;&lt;a href=&quot;https://communities.vmware.com/community/vmtn/vcenter/labmanager/content?filterID=contentstatus%5Bpublished%5D%7Eobjecttype%7Eobjecttype%5Bdocument%5D&quot;&gt;internal API&lt;/a&gt;&amp;quot;, which is not officially supported but can be used for more control of what kind of automation you wanna do. &lt;/p&gt;
</description>
      <pubDate>Tue, 08 Dec 2009 13:46:00 -0800</pubDate>
      <dc:date>2009-12-08T13:46:00-08:00</dc:date>
    </item>
    <item>
      <title>Doxygen and Perl POD</title>
      <link>blog url/perl/doxygen/2009/12/05/perl-doxygen.html</link>
      <description>&lt;p&gt;If you have ever dealt with Perl modules on CPAN, you will immediately notice the widespread use of POD to document every thing. And then most POD processors do a simple conversion to HTML (or for that matter many other formats) for proper presentation. pod2html is a very good tool for what it does but when you are maintaining frameworks written entirely in Perl, a simple POD wouldn&amp;#39;t be the only documentation that you&amp;#39;ll need especially if you want your co-worker to just read it &amp;amp; pick up where you left off. You need to present a little bit more &amp;quot;structure&amp;quot; to your documentation than simply providing description &amp;amp; synopsis for each module. So, when some one refers to framework documentation they are typically not looking for just your method descriptions but a lot more than that like for e.g. an object model or inheritance diagram or the whole frameworks package structure. Sure you can tell them to open up the whole package tree &amp;amp; look at it, but that is just rude - especially with Perl.&lt;/p&gt;
</description>
      <pubDate>Sat, 05 Dec 2009 08:27:00 -0800</pubDate>
      <dc:date>2009-12-05T08:27:00-08:00</dc:date>
    </item>
    <dc:date>2012-06-26T10:34:00-07:00</dc:date>
  </channel>
</rss>